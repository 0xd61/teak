#import "core:modules/math" ma;

void CheckPrimeFactorization(int x) {
	if x == 0 { return; }
	int[] p = ma.IntegerPrimeFactorization(x);
	int y = 1;
	for int q in p { 
		for int k = 2; k < q; k += 1 {
			assert IntegerModulo(q, k) != 0;
		}
		y *= q; 
	}
	assert x == y;
}

void CheckExtendedEuclideanAlgorithm(int a, int b) {
	int gcd, int ca, int cb = ma.IntegerExtendedEuclidean(a, b);
	assert gcd == ma.IntegerGCD(a, b);
	assert gcd == ca * a + cb * b;
}

void CheckCRT(int[] r, int[] m) {
	int x, int M = ma.IntegerCRT(r, m);
	for int i = -5; i <= 5; i += 1 {
		int y = x + i * M;
		for int j = 0; j < r:len(); j += 1 {
			assert IntegerModulo(y, m[j]) == IntegerModulo(r[j], m[j]);
		}
	}
}

void Start() {
	assert ma.IntegerGCD(8, 10) == 2;
	assert ma.IntegerGCD(-8, 10) == 2;
	assert ma.IntegerGCD(-8, -10) == 2;
	assert ma.IntegerGCD(8, -10) == 2;
	assert ma.IntegerGCD(8, 9) == 1;
	assert ma.IntegerGCD(-8, 9) == 1;
	assert ma.IntegerGCD(-8, -9) == 1;
	assert ma.IntegerGCD(8, -9) == 1;
	assert ma.IntegerGCD(0, 3) == 3;
	assert ma.IntegerGCD(3, 0) == 3;
	assert ma.IntegerGCD(0, 1) == 1;
	assert ma.IntegerGCD(1, 0) == 1;
	assert ma.IntegerGCD(1, 1) == 1;
	assert ma.IntegerGCD(2, 2) == 2;
	assert ma.IntegerGCD(3, 3) == 3;
	assert ma.IntegerGCD(7, 14) == 7;
	assert ma.IntegerLCM(7, 14) == 14;
	assert ma.IntegerLCM(5, 6) == 30;
	assert ma.IntegerLCM(4, 6) == 12;
	assert ma.IntegerLCM(0, 5) == 0;
	assert ma.IntegerLCM(-5, 6) == 30;

	for int i = -20; i <= 20; i += 1 { for int j = -20; j <= 20; j += 1 { if i != 0 || j != 0 { CheckExtendedEuclideanAlgorithm(i, j); } } }
	for int i in [-2, -1, 0, 1, 2] { for int j in [-2, -1, 0, 1, 2] { for int k in [-2, -1, 0, 1, 2] { CheckCRT([i, j, k], [7, 11, 13]); } } }
	for int i in [-2, -1, 0, 1, 2] { for int j in [-2, -1, 0, 1, 2] { for int k in [-2, -1, 0, 1, 2] { CheckCRT([i, j, k], [7, 12, 13]); } } }
	for int i = -20; i <= 20; i += 1 { CheckPrimeFactorization(i); }
}
