struct V2 {
	float x;
	float y;
	int[] z;
	V2 w;
};

V2 Test(V2 v) {
	return v;
}

void Start() {
	int[] l0 = [ 1, 2, 3, ];
	int[] l1 = [ 1, 2, 3 ];
	assert l0:len() == l1:len();
	for int i = 0; i < l0:len(); i += 1 { assert l0[i] == l1[i]; }

	V2 v = [ x = 3.0, y = 5.0 ];
	assert v.x == 3.0;
	assert v.y == 5.0;
	v = [ y = 6.0 ];
	assert v.x == 0.0;
	assert v.y == 6.0;
	v = [];
	assert v.x == 0.0;
	assert v.y == 0.0;

	v = Test([]);
	assert v.x == 0.0;
	assert v.y == 0.0;
	v = Test([x = 4.0, y = 7.0]);
	assert v.x == 4.0;
	assert v.y == 7.0;

	V2[] u = [[x = 4.0, w = [x=8.0]], [y = 4.5, z = [6]], [x = 5.0, z = []]];
	assert u:len() == 3;
	assert u[0].x == 4.0;
	assert u[0].y == 0.0;
	assert u[0].z == null;
	assert u[0].w.x == 8.0;
	assert u[0].w.y == 0.0;
	assert u[1].x == 0.0;
	assert u[1].y == 4.5;
	assert u[1].z:len() == 1;
	assert u[1].z[0] == 6;
	assert u[1].w == null;
	assert u[2].x == 5.0;
	assert u[2].y == 0.0;
	assert u[2].z:len() == 0;
	assert u[2].w == null;
	u:add([x = 6.0]);
	u:insert([x = 6.0], 0);
	assert u:len() == 5;
	assert u[0].x == 6.0;
	assert u[1].x == 4.0;
	assert u[2].x == 0.0;
	assert u[3].x == 5.0;
	assert u[4].x == 6.0;

	err[V2] e = new err[V2] "okay";
	V2 ev = e:default([x = 10.0]);
	assert ev.x == 10.0;

	assert (Test:curry([y = 20.0]))().y == 20.0;
}
