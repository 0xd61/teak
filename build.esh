bool debug #option;
bool runTests #option;

void RunTests(str executable) {
	// TODO Timeout.
		
	FileWriteAll("tests_log.txt", "!! running tests...\n");
	int success = 0;
	int total = 0;

	for str file in DirectoryEnumerateRecursively("tests"):assert() {
		bool expected;
		str noRun = "--output-overview" if StringContains(file, ".norun") else "";

		if StringEndsWith(file, ".err.esh") {
			FileAppend("tests_log.txt", "!! expecting error from '%file%'...\n");
			expected = false;
		} else if StringEndsWith(file, ".esh") {
			FileAppend("tests_log.txt", "!! expecting success from '%file%'...\n");
			expected = true;
		} else {
			continue;
		}

		if SystemShellExecute("%executable% --want-completion-confirmation %noRun% tests/%file% 2>> tests_log.txt") == expected
				&& PathDelete("completion_confirmation.txt"):success() { 
			success += 1; 
		} else { 
			FileAppend("tests_log.txt", "!! test failed\n");
			LogError("The test failed.");
		}

		total += 1;
	}

	LogInfo("%success%/%total% tests succeeded.");
}

void ProcessBaseModule() {
	str string = FileReadAll("base_module.esh"):assert();
	str result = "";

	for str x in string {
		if x == "\"" { result += "\\\""; }
		else if x == "\\" { result += "\\\\"; }
		else if x == "\n" { result += "\\n\"\n\""; }
		else if x == "\t" { result += "\\t"; }
		else { result += x; }
	}

	FileWriteAll("base_module.h", "/* generated by build.esh */\n\"" + result + "\"");
}

void Start() { 
	bool okay;
	str executable = "./esh";

	ProcessBaseModule();

	if SystemGetHostName() == "Windows" {
		str warningFlags = "/Wall /wd4201 /wd4242 /wd4244 /wd4255 /wd4267 /wd4456 /wd4668 /wd4710 /wd4711 /wd4774 /wd4820 /wd4996 /wd5045";
		str optimizeFlags = "" if debug else "/O2";
		assert SystemShellExecute("cl.exe /Zi esh.c %warningFlags% %optimizeFlags% /link /OUT:new_esh.exe");
		okay = SystemShellExecute("new_esh examples\\hello_world.esh");
		executable = "new_esh";
	} else {
		str optimizeFlags = "-fsanitize=address" if debug else "-O2";
		assert SystemShellExecute("gcc -o new_esh esh.c -g -Wall -Wextra %optimizeFlags% -pthread -ldl -rdynamic"); 
		okay = SystemShellExecute("./new_esh examples/hello_world.esh");
	}

	if okay {
		if SystemGetHostName() == "Windows" {
			LogInfo("New build looks okay, please run \"move new_esh.exe esh.exe\".");
		} else {
			LogInfo("New build looks okay, replacing existing executable...");
			PathMove("new_esh", "esh");
		}
	} else {
		LogError("New build looks bad.");
		assert false;
	}

	if runTests {
		RunTests(executable);
	}
}
