bool debug #option;
bool runTests #option;

void RunTests() {
	// TODO Timeout.
		
	FileWriteAll("tests_log.txt", "!! running tests...\n");
	int success = 0;
	int total = 0;

	for str file in DirectoryEnumerate("tests"):assert() {
		bool expected;

		if StringEndsWith(file, ".err.esh") {
			FileAppend("tests_log.txt", "!! expecting error from '%file%'...\n");
			expected = false;
		} else if StringEndsWith(file, ".esh") {
			FileAppend("tests_log.txt", "!! expecting success from '%file%'...\n");
			expected = true;
		} else {
			continue;
		}

		if SystemShellExecute("./esh tests/%file% 2>> tests_log.txt") == expected { 
			success += 1; 
		} else { 
			FileAppend("tests_log.txt", "!! test failed\n");
		}

		total += 1;
	}

	LogInfo("%success%/%total% tests succeeded.");
}

void Start() { 
	str optimizeFlags = "-O2";
	if debug optimizeFlags = "";
	assert SystemShellExecute("gcc -o new_esh esh.c -g -Wall -Wextra %optimizeFlags% -pthread -ldl -rdynamic"); 

	if SystemShellExecute("./new_esh examples/hello_world.esh") {
		LogInfo("New build looks okay, replacing existing executable...");
		PathMove("new_esh", "esh");
	} else {
		LogError("New build looks bad.");
		assert false;
	}

	if runTests {
		RunTests();
	}
}
